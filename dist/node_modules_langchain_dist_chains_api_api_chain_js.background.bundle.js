"use strict";
(self["webpackChunkwhispr"] = self["webpackChunkwhispr"] || []).push([["node_modules_langchain_dist_chains_api_api_chain_js"],{

/***/ "../../node_modules/langchain/dist/chains/api/api_chain.js":
/*!*****************************************************************!*\
  !*** ../../node_modules/langchain/dist/chains/api/api_chain.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   APIChain: () => (/* binding */ APIChain)
/* harmony export */ });
/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../base.js */ "../../node_modules/langchain/dist/chains/base.js");
/* harmony import */ var _llm_chain_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../llm_chain.js */ "../../node_modules/langchain/dist/chains/llm_chain.js");
/* harmony import */ var _prompts_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./prompts.js */ "../../node_modules/langchain/dist/chains/api/prompts.js");



/**
 * Class that extends BaseChain and represents a chain specifically
 * designed for making API requests and processing API responses.
 */
class APIChain extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseChain {
    get inputKeys() {
        return [this.inputKey];
    }
    get outputKeys() {
        return [this.outputKey];
    }
    constructor(fields) {
        super(fields);
        Object.defineProperty(this, "apiAnswerChain", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "apiRequestChain", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "apiDocs", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "headers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: {}
        });
        Object.defineProperty(this, "inputKey", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "question"
        });
        Object.defineProperty(this, "outputKey", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "output"
        });
        this.apiRequestChain = fields.apiRequestChain;
        this.apiAnswerChain = fields.apiAnswerChain;
        this.apiDocs = fields.apiDocs;
        this.inputKey = fields.inputKey ?? this.inputKey;
        this.outputKey = fields.outputKey ?? this.outputKey;
        this.headers = fields.headers ?? this.headers;
    }
    /** @ignore */
    async _call(values, runManager) {
        const question = values[this.inputKey];
        const api_url = await this.apiRequestChain.predict({ question, api_docs: this.apiDocs }, runManager?.getChild("request"));
        const res = await fetch(api_url, { headers: this.headers });
        const api_response = await res.text();
        const answer = await this.apiAnswerChain.predict({ question, api_docs: this.apiDocs, api_url, api_response }, runManager?.getChild("response"));
        return { [this.outputKey]: answer };
    }
    _chainType() {
        return "api_chain";
    }
    static async deserialize(data) {
        const { api_request_chain, api_answer_chain, api_docs } = data;
        if (!api_request_chain) {
            throw new Error("LLMChain must have api_request_chain");
        }
        if (!api_answer_chain) {
            throw new Error("LLMChain must have api_answer_chain");
        }
        if (!api_docs) {
            throw new Error("LLMChain must have api_docs");
        }
        return new APIChain({
            apiAnswerChain: await _llm_chain_js__WEBPACK_IMPORTED_MODULE_1__.LLMChain.deserialize(api_answer_chain),
            apiRequestChain: await _llm_chain_js__WEBPACK_IMPORTED_MODULE_1__.LLMChain.deserialize(api_request_chain),
            apiDocs: api_docs,
        });
    }
    serialize() {
        return {
            _type: this._chainType(),
            api_answer_chain: this.apiAnswerChain.serialize(),
            api_request_chain: this.apiRequestChain.serialize(),
            api_docs: this.apiDocs,
        };
    }
    /**
     * Static method to create a new APIChain from a BaseLanguageModel and API
     * documentation.
     * @param llm BaseLanguageModel instance.
     * @param apiDocs API documentation.
     * @param options Optional configuration options for the APIChain.
     * @returns New APIChain instance.
     */
    static fromLLMAndAPIDocs(llm, apiDocs, options = {}) {
        const { apiUrlPrompt = _prompts_js__WEBPACK_IMPORTED_MODULE_2__.API_URL_PROMPT_TEMPLATE, apiResponsePrompt = _prompts_js__WEBPACK_IMPORTED_MODULE_2__.API_RESPONSE_PROMPT_TEMPLATE, } = options;
        const apiRequestChain = new _llm_chain_js__WEBPACK_IMPORTED_MODULE_1__.LLMChain({ prompt: apiUrlPrompt, llm });
        const apiAnswerChain = new _llm_chain_js__WEBPACK_IMPORTED_MODULE_1__.LLMChain({ prompt: apiResponsePrompt, llm });
        return new this({
            apiAnswerChain,
            apiRequestChain,
            apiDocs,
            ...options,
        });
    }
}


/***/ }),

/***/ "../../node_modules/langchain/dist/chains/api/prompts.js":
/*!***************************************************************!*\
  !*** ../../node_modules/langchain/dist/chains/api/prompts.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   API_RESPONSE_PROMPT_TEMPLATE: () => (/* binding */ API_RESPONSE_PROMPT_TEMPLATE),
/* harmony export */   API_RESPONSE_RAW_PROMPT_TEMPLATE: () => (/* binding */ API_RESPONSE_RAW_PROMPT_TEMPLATE),
/* harmony export */   API_URL_PROMPT_TEMPLATE: () => (/* binding */ API_URL_PROMPT_TEMPLATE),
/* harmony export */   API_URL_RAW_PROMPT_TEMPLATE: () => (/* binding */ API_URL_RAW_PROMPT_TEMPLATE)
/* harmony export */ });
/* harmony import */ var _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/prompts */ "../../node_modules/@langchain/core/prompts.js");
/* eslint-disable spaced-comment */

const API_URL_RAW_PROMPT_TEMPLATE = `You are given the below API Documentation:
{api_docs}
Using this documentation, generate the full API url to call for answering the user question.
You should build the API url in order to get a response that is as short as possible, while still getting the necessary information to answer the question. Pay attention to deliberately exclude any unnecessary pieces of data in the API call.

Question:{question}
API url:`;
const API_URL_PROMPT_TEMPLATE = /* #__PURE__ */ new _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.PromptTemplate({
    inputVariables: ["api_docs", "question"],
    template: API_URL_RAW_PROMPT_TEMPLATE,
});
const API_RESPONSE_RAW_PROMPT_TEMPLATE = `${API_URL_RAW_PROMPT_TEMPLATE} {api_url}

Here is the response from the API:

{api_response}

Summarize this response to answer the original question.

Summary:`;
const API_RESPONSE_PROMPT_TEMPLATE = /* #__PURE__ */ new _langchain_core_prompts__WEBPACK_IMPORTED_MODULE_0__.PromptTemplate({
    inputVariables: ["api_docs", "question", "api_url", "api_response"],
    template: API_RESPONSE_RAW_PROMPT_TEMPLATE,
});


/***/ })

}]);
//# sourceMappingURL=node_modules_langchain_dist_chains_api_api_chain_js.background.bundle.js.map